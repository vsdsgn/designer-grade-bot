import os
import json
from fastapi import FastAPI, Request
from app.utils.telegram import send_message, send_document, delete_inline_keyboard
from app.core.dialog_engine import get_next_question
from app.logic.grade_engine import grade_user_from_history
from app.utils.pdf_report import generate_pdf_report
from app.utils.save_to_json import save_user_data, save_json
from app.utils.feedback import save_feedback

app = FastAPI()

USER_SESSIONS = {}
PAID_USERS = set()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()

        if "message" in data:
            message = data["message"]
            chat_id = str(message["chat"]["id"])
            username = message["from"].get("first_name", "–¥—Ä—É–≥")
            text = message.get("text", "").strip()
            user_lang = message["from"].get("language_code", "en")
        elif "callback_query" in data:
            message = data["callback_query"]["message"]
            chat_id = str(message["chat"]["id"])
            message_id = message["message_id"]
            user_lang = data["callback_query"]["from"].get("language_code", "en")
            await delete_inline_keyboard(chat_id, message_id)
            text = "/start"
            username = data["callback_query"]["from"].get("first_name", "–¥—Ä—É–≥")
        else:
            return {"ok": True}

        print(f"‚û°Ô∏è Text: {text} | Chat ID: {chat_id} | Lang: {user_lang}")

        if text == "/start":
            USER_SESSIONS[chat_id] = {"messages": [], "lang": user_lang}
            welcome = (
                f"""–ü—Ä–∏–≤–µ—Ç, {username}!

                –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π –≥—Ä–µ–π–¥ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥.

                –§–æ—Ä–º–∞—Ç ‚Äî –∫–∞–∫ –≤ —á–∞—Ç–µ. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ.

                –í –∫–æ–Ω—Ü–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å PDF-–æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.

                –ì–æ—Ç–æ–≤?"""
            )
            await send_message(chat_id, welcome, )

        elif text.lower() == "/reset":
            USER_SESSIONS.pop(chat_id, None)
            if chat_id in PAID_USERS:
                await send_message(chat_id, "–ì—Ä–µ–π–¥ —Å–±—Ä–æ—à–µ–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.")
            else:
                await send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")

        elif text.lower() == "/feedback":
            await send_message(chat_id, "–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:")
            USER_SESSIONS[chat_id]["awaiting_feedback"] = True

        elif text.lower() == "/language":
            await send_message(chat_id, f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç.

–ù–∞–ø—Ä–∏–º–µ—Ä: English, –†—É—Å—Å–∫–∏–π, Espa√±ol, ‰∏≠Êñá...""")
            USER_SESSIONS[chat_id]["awaiting_language"] = True

        elif text.lower() == "/grade":
            history = USER_SESSIONS.get(chat_id, {}).get("messages", [])
            if not history:
                await send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.")
            else:
                result = await grade_user_from_history(history)
                pdf_path = generate_pdf_report(result, username)
                await send_document(chat_id, pdf_path)

        elif chat_id in USER_SESSIONS:
            session = USER_SESSIONS[chat_id]
            if session.get("awaiting_feedback"):
                save_feedback(chat_id, text)
                await send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
                session["awaiting_feedback"] = False
            elif session.get("awaiting_language"):
                session["lang"] = text.lower()
                await send_message(chat_id, f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}")
                session["awaiting_language"] = False
            else:
                messages = session.setdefault("messages", [])
                messages.append({"role": "user", "content": text})
                save_json(chat_id, messages)
                reply = await get_next_question(chat_id, text, session["lang"])
                if reply:
                    await send_message(chat_id, reply)
                else:
                    await send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
                    result = await grade_user_from_history(messages)
                    pdf_path = generate_pdf_report(result, username)
                    await send_document(chat_id, pdf_path)
                    PAID_USERS.add(chat_id)
        else:
            await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")

        return {"ok": True}

    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≤ webhook:", str(e))
        return {"ok": False, "error": str(e)}