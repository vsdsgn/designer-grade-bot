
import os
import json
from fastapi import FastAPI, Request
from app.utils.telegram import send_message, send_document, delete_inline_keyboard
from app.core.dialog_engine import get_next_question
from app.logic.grade_engine import grade_user_from_history
from app.utils.pdf_report import generate_pdf_report
from app.utils.save_to_json import save_user_data
from app.utils.feedback import save_feedback

app = FastAPI()

USER_SESSIONS = {}
PAID_USERS = set()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()

        chat_id = None
        text = ""
        username = "–¥—Ä—É–≥"
        user_lang = "en"
        message_id = None

        if "message" in data and isinstance(data["message"], dict):
            message = data["message"]
            if not isinstance(message.get("chat"), dict):
                print("‚ö†Ô∏è Unexpected format in message:", data)
                return {"status": "ignored"}

            chat_id = str(message["chat"]["id"])
            username = message["from"].get("first_name", "–¥—Ä—É–≥")
            text = message.get("text", "").strip()
            user_lang = message["from"].get("language_code", "en")

        elif "callback_query" in data:
            message = data["callback_query"]["message"]
            chat_id = str(message["chat"]["id"])
            message_id = message["message_id"]
            user_lang = data["callback_query"]["from"].get("language_code", "en")
            await delete_inline_keyboard(chat_id, message_id)
            username = data["callback_query"]["from"].get("first_name", "–¥—Ä—É–≥")
            text = data["callback_query"]["data"].strip()
        else:
            return {"status": "ignored"}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        session = USER_SESSIONS.setdefault(chat_id, {"messages": [], "lang": user_lang, "paid": False})

        # –ö–æ–º–∞–Ω–¥—ã
        if text == "/start":
            if session.get("paid"):
                await send_message(chat_id, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º.")
                return

            welcome = f"–ü—Ä–∏–≤–µ—Ç, {username}! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ –≥—Ä–µ–π–¥–∞–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤. –ü–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚úÖ"
            await send_message(chat_id, welcome)
            next_q = get_next_question(session)
            if next_q:
                await send_message(chat_id, next_q)
            else:
                await send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        elif text == "/reset":
            USER_SESSIONS.pop(chat_id, None)
            await send_message(chat_id, "–ì—Ä–µ–π–¥ —Å–±—Ä–æ—à–µ–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.")

        elif text == "/grade":
            await send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")

        elif text == "/feedback":
            await send_message(chat_id, "–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:")
            session["awaiting_feedback"] = True

        elif text == "/language":
            await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.")

        elif session.get("awaiting_feedback"):
            session["awaiting_feedback"] = False
            save_feedback(chat_id, text)
            await send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫!")

        else:
            session["messages"].append(text)
            next_q = get_next_question(session)
            if next_q:
                await send_message(chat_id, next_q)
            else:
                result = grade_user_from_history(session["messages"])
                session["result"] = result
                session["paid"] = True  # –ú–µ—Ç–∏–º, —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                pdf_path = generate_pdf_report(username, result["grade"], result["recommendations"], result["materials"])
                await send_document(chat_id, pdf_path)

        return {"status": "ok"}

    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≤ webhook:", e)
        return {"status": "error"}
